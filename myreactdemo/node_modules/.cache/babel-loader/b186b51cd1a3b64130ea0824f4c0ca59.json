{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchMonth = switchMonth;\nexports.getLastDayaOfMonth = getLastDayaOfMonth;\nexports.isValidDate = isValidDate;\nexports.toResponsibleDate = toResponsibleDate;\nexports.toCarefreeDate = toCarefreeDate;\nexports.toDateWithNoDiscrepancy = toDateWithNoDiscrepancy;\nexports.getMaxDate = getMaxDate;\nexports.getMinDate = getMinDate;\nexports.getCompareDate = getCompareDate;\nexports.hasSwitchMonth = hasSwitchMonth;\nexports.isDateEqual = isDateEqual;\nexports.isMonthEqual = isMonthEqual;\nexports.isYearEqual = isYearEqual;\nexports.getDisplayDates = getDisplayDates;\nexports.getDisplayWeek = getDisplayWeek;\nexports.getDateStr = getDateStr;\nexports.zeroPadding = zeroPadding;\n\nvar _config = require('./config');\n/**\n * @param {Date} date 日期(正常情况)\n * @param {Number} increment 多少个月 // increment 递增\n * @return {Date}  (+/-)N月后的起始日期s\n */\n\n\nfunction switchMonth(date) {\n  var increment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var month = date.getMonth() + increment,\n      year = date.getFullYear();\n  return new Date('' + year, '' + month);\n}\n/**\n * 获得某日期所在月的最后一天\n * @param {Date} date  日期\n * @return {Date} date 该月份的最后一天\n */\n\n\nfunction getLastDayaOfMonth(date) {\n  var month = date.getMonth(),\n      year = date.getFullYear();\n  return new Date(year, month, monthSize(date));\n}\n/**\n * [monthSize 获得指定日期所在月的天数]\n * @param  {[Date]} oDate [指定的日期，非必填，默认为当天]\n * @return {[Int]}       [总天数]\n */\n\n\nfunction monthSize(oDate) {\n  oDate = oDate ? oDate : new Date();\n\n  var year = oDate.getFullYear(),\n      month = oDate.getMonth(),\n      _oDate = new Date();\n\n  _oDate.setFullYear(year);\n\n  _oDate.setMonth(month + 1, 0);\n\n  return _oDate.getDate();\n}\n/**\n * 判断是否可转成Date对象\n * @param {String|Number|Date} date \n */\n\n\nfunction isValidDate(date) {\n  date = date instanceof Date ? date : new Date(date);\n\n  if (isNaN(date.getTime())) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * 格式转换成Date类型 非时间类型将变成 空 '' 抛出 \n * @param {String|Number|Date} date \n */\n\n\nfunction toResponsibleDate(date) {\n  if (isValidDate(date)) {\n    return date instanceof Date ? date : new Date(date);\n  }\n\n  return '';\n}\n/**\n * 无忧转换 - 不负责是否是正确的时间格式\n * @param {String|Number|Date} date \n */\n\n\nfunction toCarefreeDate(date) {\n  return date instanceof Date ? date : new Date(date);\n}\n/**\n * 转换日期对象 忽略 时分秒的影响\n * @param {Date} date \n */\n\n\nfunction toDateWithNoDiscrepancy(date) {\n  if (isValidDate(date)) {\n    date = toCarefreeDate(date);\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  return '';\n}\n/**\n * 找出最大日期\n * @param {Array[Date]|Date} min \n */\n\n\nfunction getMaxDate(min) {\n  if (Array.isArray(min)) {\n    var list = min.map(function (i) {\n      return toResponsibleDate(i);\n    }).filter(function (i) {\n      return i;\n    }).map(function (i) {\n      return toDateWithNoDiscrepancy(i).getTime();\n    });\n\n    if (list.length > 0) {\n      return toDateWithNoDiscrepancy(Math.max.apply(null, list));\n    } else {\n      return '';\n    }\n  } else {\n    return toDateWithNoDiscrepancy(min);\n  }\n}\n/**\n * 找出最小日期\n * @param {Array[Date]|Date} max \n */\n\n\nfunction getMinDate(max) {\n  if (Array.isArray(max)) {\n    var list = max.map(function (i) {\n      return toDate(i);\n    }).filter(function (i) {\n      return i;\n    }).map(function (i) {\n      return toDateWithNoDiscrepancy(i).getTime();\n    });\n\n    if (list.length > 0) {\n      return toDateWithNoDiscrepancy(Math.min.apply(null, list));\n    } else {\n      return '';\n    }\n  } else {\n    return toDateWithNoDiscrepancy(max);\n  }\n}\n/**\n * 对比日期大小\n * @param { Date } targetDate   目标日期\n * @param { Date } sourceDate   源日期\n * @returns number: 0:目标日期 === 源日期;1:目标日期 < 源日期;2:目标日期>源日期;3:两者都非时间格式\n */\n\n\nfunction getCompareDate(targetDate, sourceDate) {\n  //compareDate\n  var source = toDateWithNoDiscrepancy(sourceDate);\n  var target = toDateWithNoDiscrepancy(targetDate);\n\n  if (isDateEqual(targetDate, sourceDate)) {\n    return 0;\n  }\n\n  return target < source ? 1 : 2;\n}\n/**\n * @param {Date} month 当前月份(当前日期所在月份)\n * @param {Date} max 最大日期\n * @param {Date} min 最小日期\n * @returns {Boolean} isLastMonth 上个月是否有可选值\n * @returns {Boolean} isNextMonth 下个月是否有可选值\n */\n\n\nfunction hasSwitchMonth(month, max, min) {\n  var lastMonth = switchMonth(month, -1);\n  var nextMonth = switchMonth(month, 1);\n  return {\n    isLastMonth: min ? min < getLastDayaOfMonth(lastMonth) : true,\n    isNextMonth: max ? max > nextMonth : true\n  };\n}\n/**\n * 查看是否在同一天 \n * @param {Date} sourceDate 源日期\n * @param {Date} targetDate 目标日期\n */\n\n\nfunction isDateEqual(sourceDate, targetDate) {\n  //isDateEqual\n  var source = toDateWithNoDiscrepancy(sourceDate);\n  var target = toDateWithNoDiscrepancy(targetDate);\n\n  if (!source || !target) {\n    return false;\n  }\n\n  return !(source > target) && !(source < target) && !(source === target);\n}\n/**\n * 查看是否在同一月 \n * @param {Date} sourceDate 源日期\n * @param {Date} targetDate 目标日期\n */\n\n\nfunction isMonthEqual(sourceDate, targetDate) {\n  // isMonthEqual\n  var source = toDateWithNoDiscrepancy(sourceDate);\n  var target = toDateWithNoDiscrepancy(targetDate);\n\n  if (!source || !target) {\n    return false;\n  }\n\n  var sourceYear = source.getFullYear();\n  var sourceMonth = source.getMonth();\n  var targetYear = target.getFullYear();\n  var targetMonth = target.getMonth();\n  return sourceYear === targetYear && sourceMonth === targetMonth;\n}\n/**\n * 查看是否在同一年 \n * @param {Date} sourceDate 源日期\n * @param {Date} targetDate 目标日期\n */\n\n\nfunction isYearEqual(sourceDate, targetDate) {\n  var source = toDateWithNoDiscrepancy(sourceDate);\n  var target = toDateWithNoDiscrepancy(targetDate);\n\n  if (!source || !target) {\n    return false;\n  }\n\n  var sourceYear = source.getFullYear();\n  var targetYear = target.getFullYear();\n  return sourceYear === targetYear;\n}\n/**\n * @param {Date} dataToMath 当前日期所在月份的日期列表\n * @param {Number} start 日历起始(周几开始) 0:日,1:1,2:2,3:3,4:4,5:5,6:6 默认:0\n * @param {Array} weekFormatter 用于转译 格式与默认保持一致\n */\n\n\nfunction getDisplayDates(dataToMath) {\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var formatWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _config.weekFormatter;\n  dataToMath = dataToMath ? dataToMath : new Date();\n  formatWeek = formatWeek.sort(function (agrn1, agrn2) {\n    return agrn1.key > agrn2.key;\n  }).map(function (i) {\n    return i;\n  });\n  var y = dataToMath.getFullYear();\n  var m = dataToMath.getMonth();\n  var days = monthSize(dataToMath); //当月天数\n\n  var first = new Date(y, m, 1); //本月 第一天 日期对象\n\n  var firstWeek = new Date(y, m, 1).getDay(); // 本月第一天 周几\n\n  var last = new Date(y, m, days); //本月 第一天 日期对象\n\n  var lastWeek = new Date(y, m, days).getDay(); // 本月第一天 周几\n\n  var prevMonthDays = monthSize(new Date(y, m - 1)); //上月天数\n\n  formatWeek = formatWeek.concat(formatWeek.splice(0, formatWeek.findIndex(function (item) {\n    return item.key === start;\n  })));\n  var prevNum = formatWeek.findIndex(function (item) {\n    return item.key === firstWeek;\n  }); //本月之前还有几天\n\n  var LastNum = formatWeek.length - formatWeek.findIndex(function (item) {\n    return item.key === lastWeek;\n  }); //月末之前还有几天\n\n  var monthDateList = [],\n      monthDates = [];\n  var i = 0,\n      date = void 0; // 本月之前还有几天\n\n  for (i = 1; i <= prevNum; i++) {\n    date = new Date(y, m, i - prevNum);\n    monthDateList.push({\n      isCurMonth: false,\n      dateNum: date.getDate(),\n      // 日期一月第几天\n      day: date.getDay(),\n      // 一周第几天\n      date: date //日期对象\n\n    });\n  } // 本月日期\n\n\n  for (i = 1; i <= days; i++) {\n    date = new Date(y, m, i);\n    monthDateList.push({\n      isCurMonth: true,\n      dateNum: date.getDate(),\n      day: date.getDay(),\n      date: date\n    });\n  } // 本月之后日期\n\n\n  for (i = 1; i < LastNum; i++) {\n    date = new Date(y, m + 1, i);\n    monthDateList.push({\n      isCurMonth: false,\n      dateNum: date.getDate(),\n      day: date.getDay(),\n      date: date\n    });\n  }\n\n  monthDateList.forEach(function (item, index) {\n    var _index = Number.parseInt(index / 7);\n\n    monthDates[_index] = monthDates[_index] ? monthDates[_index] : [];\n\n    monthDates[_index].push(Object.assign(item, {\n      weekIndex: _index\n    }));\n  });\n  return monthDates;\n}\n\nfunction getDisplayWeek() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var formatWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _config.weekFormatter;\n  var displayWeek = formatWeek.sort(function (agrn1, agrn2) {\n    return agrn1.key > agrn2.key;\n  }).map(function (i) {\n    return i;\n  });\n  return displayWeek.concat(displayWeek.splice(0, displayWeek.findIndex(function (item) {\n    return item.key === start;\n  })));\n}\n/**\n * [getDateStr 获得指定日期格式的字符串]\n * @param  {[String or Date]}  date  \n * [要转换的日期，必填, String须为ISO时间字符串2016-01-01T14:16:00+08:00]\n * @param  {[String]}  format     \n * [要转化的目标格式，必填。其中 YYYY/yyyy代表年,MM代表月,DD/dd代表日。hh/HH代表时，mm代表分，ss/SS代表秒，Z代表时区,O代表数字时区（+08:00）\n * example\n * input: '2016-01-01T14:16:00+08:00','YYYY年MM月DD日 hh:mm:ss (Z)'\n * output: 2016年01月01日 14:16:00 (CTS)\n * ]\n */\n\n\nfunction getDateStr(date, format) {\n  if (!(date instanceof Date)) {\n    console.log(date);\n    throw new Error('date is required');\n  }\n\n  var _dateStr = date.toString(); //浏览器时间字符串\n\n\n  if (/invalid/i.test(_dateStr)) {\n    throw new Error('Invalid Date');\n  }\n\n  var returnStr = '',\n      year = date.getFullYear(),\n      month = date.getMonth() + 1,\n      day = date.getDate(),\n      hour = date.getHours(),\n      minute = date.getMinutes(),\n      second = date.getSeconds(),\n      weekday = date.getDay();\n  var patternI = /(yyyy)|(dd)|(hh)|(ss)|(Z)|(d)|(h)|(s)|(o)|(w)/gi,\n      pattern = /(MM)|(mm)|(M)|(m)/g; //替换年、日、小时、秒、时区\n\n  returnStr = format.replace(patternI, function (match) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var p1 = args[0],\n        p2 = args[1],\n        p3 = args[2],\n        p4 = args[3],\n        p5 = args[4],\n        p6 = args[5],\n        p7 = args[6],\n        p8 = args[7],\n        p9 = args[8],\n        p10 = args[9],\n        rest = args.slice(10);\n    if (p1) return year;\n    if (p2) return zeroPadding(day);\n    if (p3) return zeroPadding(hour);\n    if (p4) return zeroPadding(second);\n\n    if (p5) {\n      var timeZone = _dateStr.match(/\\((.*)\\)$/)[1];\n\n      if (timeZone) return timeZone;else return '' + p5;\n    }\n\n    if (p6) return day;\n    if (p7) return hour;\n    if (p8) return second;\n\n    if (p9) {\n      var offset = -date.getTimezoneOffset();\n      var isNegative = offset < 0;\n      var offsetByHours = Math.floor(offset / 60);\n      var offsetByMins = Math.floor(offset % 60);\n      var offsetByHoursAbs = zeroPadding(Math.abs(offsetByHours));\n      var offsetByMinsAbs = zeroPadding(Math.abs(offsetByMins));\n      return isNegative ? '-' + offsetByHoursAbs + ':' + offsetByMinsAbs : '+' + offsetByHoursAbs + ':' + offsetByMinsAbs;\n    }\n\n    if (p10) {\n      var weekdays = ['日', '一', '二', '三', '四', '五', '六'];\n      return weekdays[weekday];\n    }\n  }); //替换月、分钟\n\n  returnStr = returnStr.replace(pattern, function (match, p1, p2, p3, p4) {\n    if (p1) return zeroPadding(month);\n    if (p2) return zeroPadding(minute);\n    if (p3) return month;\n    if (p4) return minute;\n  });\n  return returnStr;\n}\n/**\n * [zeroPadding 小于10的数字补0，必填]\n * @param  {[Int]} value [description]\n * @return {[String]}       [description]\n */\n\n\nfunction zeroPadding(value) {\n  return value < 10 ? '0' + value : '' + value;\n}","map":null,"metadata":{},"sourceType":"script"}