{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = DatePickerProvider;\nexports.DatePickerOfControlledProvider = DatePickerOfControlledProvider;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _bar = require('./bar');\n\nvar _bar2 = _interopRequireDefault(_bar);\n\nvar _itemBox = require('./itemBox');\n\nvar _itemBox2 = _interopRequireDefault(_itemBox);\n\nvar _item = require('./item');\n\nvar _item2 = _interopRequireDefault(_item);\n\nvar _title = require('./title');\n\nvar _title2 = _interopRequireDefault(_title);\n\nvar _calendar = require('./calendar');\n\nvar _config = require('./config');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * 日期非受控组件\n * @param {React.Element} DateBar     日历组件-bar组件 默认值:DateBarLable\n * @param {React.Element} DateTitle   日历组件-bar组件 默认值:DateTitleLable\n * @param {React.Element} DateBox     日历组件-布局组件 默认值:DateBoxLable\n * @param {React.Element} DateItem    日历组件-日期组件 默认值:DateItemLable\n */\n\n\nfunction DatePickerProvider(_ref) {\n  var _ref$DateBar = _ref.DateBar,\n      DateBar = _ref$DateBar === undefined ? _bar2.default : _ref$DateBar,\n      _ref$DateTitle = _ref.DateTitle,\n      DateTitle = _ref$DateTitle === undefined ? _title2.default : _ref$DateTitle,\n      _ref$DateItem = _ref.DateItem,\n      DateItem = _ref$DateItem === undefined ? _item2.default : _ref$DateItem,\n      _ref$DateBox = _ref.DateBox,\n      DateBox = _ref$DateBox === undefined ? _itemBox2.default : _ref$DateBox,\n      DateOther = _ref.DateOther;\n\n  var DatePicker = function (_Component) {\n    _inherits(DatePicker, _Component);\n    /**\n     * @param {Object} props \n     * @param {String|Number|Date} defaultDate  - 日期对象\n     * @param {String|Number|Date} defaultMonth  - 组件显示月份 则内容须可转日期对象\n     * @param {String} props.className  - 日期组件盒子 className\n     * @param {String} props.dateBarClassName - 日期组件bar盒子 className\n     * @param {String} props.dateBoxClassName     - 日期组件日期内容盒子 className\n     * @param {String} props.dateTitClassName - 日期组件title盒子 className \n     * @param {String} props.dateClassName  - 日期组件单项盒子 className \n     * @param {Number} props.start          - 日历组件起点 默认是 0\n     * @param {Array} props.formatWeek      - 日历组件 星期title展示格式\n     */\n\n\n    function DatePicker(props) {\n      _classCallCheck(this, DatePicker);\n\n      var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));\n\n      var date = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultDate);\n      var month = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultMonth);\n\n      if (date) {\n        month = date;\n      } else {\n        if (!month) {\n          month = (0, _calendar.toDateWithNoDiscrepancy)(new Date());\n        }\n      }\n\n      _this.state = {\n        date: date,\n        month: month\n      };\n      return _this;\n    }\n    /**\n     * 传入日期返回该日期所在月份所有日期对象数组\n     * @param {Date} date  \n     */\n\n\n    _createClass(DatePicker, [{\n      key: 'onChangeMonth',\n      value: function onChangeMonth(date) {\n        this.setState({\n          month: (0, _calendar.toDateWithNoDiscrepancy)(date)\n        });\n      }\n    }, {\n      key: 'onSelect',\n      value: function onSelect(date) {\n        this.setState({\n          date: date\n        });\n        this.props.onSelect(date);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _state = this.state,\n            date = _state.date,\n            month = _state.month;\n\n        var _props = this.props,\n            start = _props.start,\n            className = _props.className,\n            dateBarClassName = _props.dateBarClassName,\n            dateTitClassName = _props.dateTitClassName,\n            dateBoxClassName = _props.dateBoxClassName,\n            dateClassName = _props.dateClassName,\n            formatWeek = _props.formatWeek,\n            otherProps = _objectWithoutProperties(_props, ['start', 'className', 'dateBarClassName', 'dateTitClassName', 'dateBoxClassName', 'dateClassName', 'formatWeek']);\n\n        return _react2.default.createElement('div', {\n          className: 'date-picker-wrap ' + className,\n          onClick: function onClick(e) {\n            e.stopPropagation();\n          }\n        }, DateBar ? _react2.default.createElement(DateBar, _extends({\n          className: dateBarClassName\n        }, otherProps, {\n          month: month,\n          date: date,\n          onChange: this.onChangeMonth.bind(this)\n        })) : null, _react2.default.createElement('div', {\n          className: 'date-picker-cal-box'\n        }, DateTitle ? _react2.default.createElement(DateTitle, {\n          start: start,\n          formatWeek: formatWeek,\n          className: dateTitClassName\n        }) : null, DateBox ? _react2.default.createElement(DateBox, _extends({\n          start: start,\n          formatWeek: formatWeek,\n          dateClassName: dateClassName,\n          className: dateBoxClassName,\n          DateItem: DateItem\n        }, otherProps, {\n          month: month,\n          onSelect: this.onSelect.bind(this),\n          date: date\n        })) : null), DateOther ? _react2.default.createElement(DateOther, otherProps) : null);\n      }\n    }]);\n\n    return DatePicker;\n  }(_react.Component);\n\n  DatePicker.propTypes = {\n    onSelect: _propTypes2.default.func,\n    formatWeek: _propTypes2.default.array,\n    start: _propTypes2.default.number,\n    className: _propTypes2.default.string,\n    dateBarClassName: _propTypes2.default.string,\n    dateBoxClassName: _propTypes2.default.string,\n    dateTitClassName: _propTypes2.default.string,\n    dateClassName: _propTypes2.default.string\n  };\n  DatePicker.defaultProps = {\n    onSelect: _config.noop,\n    formatWeek: _config.weekFormatter,\n    start: 0,\n    className: '',\n    dateBarClassName: '',\n    dateBoxClassName: '',\n    dateTitClassName: '',\n    dateClassName: '',\n    max: '',\n    min: ''\n  };\n  return DatePicker;\n}\n/**\n * 日期受控组件\n * @param {*} params \n */\n\n\nfunction DatePickerOfControlledProvider(_ref2) {\n  var _ref2$DateBar = _ref2.DateBar,\n      DateBar = _ref2$DateBar === undefined ? _bar2.default : _ref2$DateBar,\n      _ref2$DateTitle = _ref2.DateTitle,\n      DateTitle = _ref2$DateTitle === undefined ? _title2.default : _ref2$DateTitle,\n      _ref2$DateItem = _ref2.DateItem,\n      DateItem = _ref2$DateItem === undefined ? _item2.default : _ref2$DateItem,\n      _ref2$DateBox = _ref2.DateBox,\n      DateBox = _ref2$DateBox === undefined ? _itemBox2.default : _ref2$DateBox,\n      DateOther = _ref2.DateOther;\n\n  var DatePicker = function (_Component2) {\n    _inherits(DatePicker, _Component2);\n    /**\n     * @param {Object} props \n     * @param {String|Number|Date} date  - 日期对象\n     * @param {String|Number|Date} defaultMonth  - 组件显示月份 则内容须可转日期对象\n     * @param {String} props.className  - 日期组件盒子 className\n     * @param {String} props.dateBarClassName - 日期组件bar盒子 className\n     * @param {String} props.dateBoxClassName     - 日期组件日期内容盒子 className\n     * @param {String} props.dateTitClassName - 日期组件title盒子 className \n     * @param {String} props.dateClassName  - 日期组件单项盒子 className \n     * @param {Number} props.start          - 日历组件起点 默认是 0\n     * @param {Array} props.formatWeek      - 日历组件 星期title展示格式\n     */\n\n\n    function DatePicker(props) {\n      _classCallCheck(this, DatePicker);\n\n      var _this2 = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));\n\n      var date = (0, _calendar.toDateWithNoDiscrepancy)(props.date);\n      var month = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultMonth);\n\n      if (date) {\n        month = date;\n      } else {\n        if (!month) {\n          month = (0, _calendar.toDateWithNoDiscrepancy)(new Date());\n        }\n      }\n\n      _this2.state = {\n        month: month\n      };\n      return _this2;\n    }\n\n    _createClass(DatePicker, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (nextProps.date !== this.props.date) {\n          var month = this.state.month;\n\n          if (!(0, _calendar.isMonthEqual)(nextProps.date, month)) {\n            var date = (0, _calendar.toDateWithNoDiscrepancy)(nextProps.date);\n            this.setState({\n              month: date\n            });\n          }\n        }\n      }\n      /**\n       * 传入日期返回该日期所在月份所有日期对象数组\n       * @param {Date} date  \n       */\n\n    }, {\n      key: 'onChangeMonth',\n      value: function onChangeMonth(date) {\n        this.setState({\n          month: (0, _calendar.toDateWithNoDiscrepancy)(date)\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var month = this.state.month;\n\n        var _props2 = this.props,\n            className = _props2.className,\n            dateBarClassName = _props2.dateBarClassName,\n            dateTitClassName = _props2.dateTitClassName,\n            dateBoxClassName = _props2.dateBoxClassName,\n            dateClassName = _props2.dateClassName,\n            formatWeek = _props2.formatWeek,\n            start = _props2.start,\n            otherProps = _objectWithoutProperties(_props2, ['className', 'dateBarClassName', 'dateTitClassName', 'dateBoxClassName', 'dateClassName', 'formatWeek', 'start']);\n\n        var date = (0, _calendar.toDateWithNoDiscrepancy)(this.props.date);\n        return _react2.default.createElement('div', {\n          className: 'date-picker-wrap ' + className,\n          onClick: function onClick(e) {\n            e.stopPropagation();\n          }\n        }, DateBar ? _react2.default.createElement(DateBar, _extends({\n          month: month,\n          className: dateBarClassName\n        }, otherProps, {\n          date: date,\n          onChange: this.onChangeMonth.bind(this)\n        })) : null, DateBox ? _react2.default.createElement('div', {\n          className: 'date-picker-cal-box'\n        }, DateTitle ? _react2.default.createElement(DateTitle, {\n          start: start,\n          formatWeek: formatWeek,\n          className: dateTitClassName\n        }) : null, _react2.default.createElement(DateBox, _extends({\n          start: start,\n          formatWeek: formatWeek,\n          month: month,\n          dateClassName: dateClassName,\n          className: dateBoxClassName,\n          DateItem: DateItem\n        }, otherProps, {\n          date: date\n        }))) : null, DateOther ? _react2.default.createElement(DateOther, _extends({\n          date: date,\n          start: start,\n          formatWeek: formatWeek,\n          month: month\n        }, otherProps)) : null);\n      }\n    }]);\n\n    return DatePicker;\n  }(_react.Component);\n\n  DatePicker.propTypes = {\n    onSelect: _propTypes2.default.func,\n    formatWeek: _propTypes2.default.array,\n    start: _propTypes2.default.number,\n    className: _propTypes2.default.string,\n    dateBarClassName: _propTypes2.default.string,\n    dateBoxClassName: _propTypes2.default.string,\n    dateTitClassName: _propTypes2.default.string,\n    dateClassName: _propTypes2.default.string\n  };\n  DatePicker.defaultProps = {\n    onSelect: _config.noop,\n    formatWeek: _config.weekFormatter,\n    start: 0,\n    className: '',\n    dateBarClassName: '',\n    dateBoxClassName: '',\n    dateTitClassName: '',\n    dateClassName: '',\n    max: '',\n    min: '',\n    defaultMonth: ''\n  };\n  return DatePicker;\n}","map":null,"metadata":{},"sourceType":"script"}