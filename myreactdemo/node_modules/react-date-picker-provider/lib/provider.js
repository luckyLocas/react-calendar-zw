'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = DatePickerProvider;
exports.DatePickerOfControlledProvider = DatePickerOfControlledProvider;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bar = require('./bar');

var _bar2 = _interopRequireDefault(_bar);

var _itemBox = require('./itemBox');

var _itemBox2 = _interopRequireDefault(_itemBox);

var _item = require('./item');

var _item2 = _interopRequireDefault(_item);

var _title = require('./title');

var _title2 = _interopRequireDefault(_title);

var _calendar = require('./calendar');

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 日期非受控组件
 * @param {React.Element} DateBar     日历组件-bar组件 默认值:DateBarLable
 * @param {React.Element} DateTitle   日历组件-bar组件 默认值:DateTitleLable
 * @param {React.Element} DateBox     日历组件-布局组件 默认值:DateBoxLable
 * @param {React.Element} DateItem    日历组件-日期组件 默认值:DateItemLable
 */
function DatePickerProvider(_ref) {
  var _ref$DateBar = _ref.DateBar,
      DateBar = _ref$DateBar === undefined ? _bar2.default : _ref$DateBar,
      _ref$DateTitle = _ref.DateTitle,
      DateTitle = _ref$DateTitle === undefined ? _title2.default : _ref$DateTitle,
      _ref$DateItem = _ref.DateItem,
      DateItem = _ref$DateItem === undefined ? _item2.default : _ref$DateItem,
      _ref$DateBox = _ref.DateBox,
      DateBox = _ref$DateBox === undefined ? _itemBox2.default : _ref$DateBox,
      DateOther = _ref.DateOther;

  var DatePicker = function (_Component) {
    _inherits(DatePicker, _Component);

    /**
     * @param {Object} props 
     * @param {String|Number|Date} defaultDate  - 日期对象
     * @param {String|Number|Date} defaultMonth  - 组件显示月份 则内容须可转日期对象
     * @param {String} props.className  - 日期组件盒子 className
     * @param {String} props.dateBarClassName - 日期组件bar盒子 className
     * @param {String} props.dateBoxClassName     - 日期组件日期内容盒子 className
     * @param {String} props.dateTitClassName - 日期组件title盒子 className 
     * @param {String} props.dateClassName  - 日期组件单项盒子 className 
     * @param {Number} props.start          - 日历组件起点 默认是 0
     * @param {Array} props.formatWeek      - 日历组件 星期title展示格式
     */
    function DatePicker(props) {
      _classCallCheck(this, DatePicker);

      var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

      var date = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultDate);
      var month = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultMonth);
      if (date) {
        month = date;
      } else {
        if (!month) {
          month = (0, _calendar.toDateWithNoDiscrepancy)(new Date());
        }
      }
      _this.state = {
        date: date,
        month: month
      };
      return _this;
    }
    /**
     * 传入日期返回该日期所在月份所有日期对象数组
     * @param {Date} date  
     */


    _createClass(DatePicker, [{
      key: 'onChangeMonth',
      value: function onChangeMonth(date) {
        this.setState({
          month: (0, _calendar.toDateWithNoDiscrepancy)(date)
        });
      }
    }, {
      key: 'onSelect',
      value: function onSelect(date) {
        this.setState({
          date: date
        });
        this.props.onSelect(date);
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            date = _state.date,
            month = _state.month;

        var _props = this.props,
            start = _props.start,
            className = _props.className,
            dateBarClassName = _props.dateBarClassName,
            dateTitClassName = _props.dateTitClassName,
            dateBoxClassName = _props.dateBoxClassName,
            dateClassName = _props.dateClassName,
            formatWeek = _props.formatWeek,
            otherProps = _objectWithoutProperties(_props, ['start', 'className', 'dateBarClassName', 'dateTitClassName', 'dateBoxClassName', 'dateClassName', 'formatWeek']);

        return _react2.default.createElement(
          'div',
          {
            className: 'date-picker-wrap ' + className,
            onClick: function onClick(e) {
              e.stopPropagation();
            } },
          DateBar ? _react2.default.createElement(DateBar, _extends({
            className: dateBarClassName
          }, otherProps, {
            month: month,
            date: date,
            onChange: this.onChangeMonth.bind(this)
          })) : null,
          _react2.default.createElement(
            'div',
            { className: 'date-picker-cal-box' },
            DateTitle ? _react2.default.createElement(DateTitle, { start: start, formatWeek: formatWeek, className: dateTitClassName }) : null,
            DateBox ? _react2.default.createElement(DateBox, _extends({
              start: start,
              formatWeek: formatWeek,
              dateClassName: dateClassName,
              className: dateBoxClassName,
              DateItem: DateItem
            }, otherProps, {
              month: month,
              onSelect: this.onSelect.bind(this),
              date: date
            })) : null
          ),
          DateOther ? _react2.default.createElement(DateOther, otherProps) : null
        );
      }
    }]);

    return DatePicker;
  }(_react.Component);

  DatePicker.propTypes = {
    onSelect: _propTypes2.default.func,
    formatWeek: _propTypes2.default.array,
    start: _propTypes2.default.number,
    className: _propTypes2.default.string,
    dateBarClassName: _propTypes2.default.string,
    dateBoxClassName: _propTypes2.default.string,
    dateTitClassName: _propTypes2.default.string,
    dateClassName: _propTypes2.default.string
  };
  DatePicker.defaultProps = {
    onSelect: _config.noop,
    formatWeek: _config.weekFormatter,
    start: 0,
    className: '',
    dateBarClassName: '',
    dateBoxClassName: '',
    dateTitClassName: '',
    dateClassName: '',
    max: '',
    min: ''
  };
  return DatePicker;
}
/**
 * 日期受控组件
 * @param {*} params 
 */
function DatePickerOfControlledProvider(_ref2) {
  var _ref2$DateBar = _ref2.DateBar,
      DateBar = _ref2$DateBar === undefined ? _bar2.default : _ref2$DateBar,
      _ref2$DateTitle = _ref2.DateTitle,
      DateTitle = _ref2$DateTitle === undefined ? _title2.default : _ref2$DateTitle,
      _ref2$DateItem = _ref2.DateItem,
      DateItem = _ref2$DateItem === undefined ? _item2.default : _ref2$DateItem,
      _ref2$DateBox = _ref2.DateBox,
      DateBox = _ref2$DateBox === undefined ? _itemBox2.default : _ref2$DateBox,
      DateOther = _ref2.DateOther;

  var DatePicker = function (_Component2) {
    _inherits(DatePicker, _Component2);

    /**
     * @param {Object} props 
     * @param {String|Number|Date} date  - 日期对象
     * @param {String|Number|Date} defaultMonth  - 组件显示月份 则内容须可转日期对象
     * @param {String} props.className  - 日期组件盒子 className
     * @param {String} props.dateBarClassName - 日期组件bar盒子 className
     * @param {String} props.dateBoxClassName     - 日期组件日期内容盒子 className
     * @param {String} props.dateTitClassName - 日期组件title盒子 className 
     * @param {String} props.dateClassName  - 日期组件单项盒子 className 
     * @param {Number} props.start          - 日历组件起点 默认是 0
     * @param {Array} props.formatWeek      - 日历组件 星期title展示格式
     */
    function DatePicker(props) {
      _classCallCheck(this, DatePicker);

      var _this2 = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

      var date = (0, _calendar.toDateWithNoDiscrepancy)(props.date);
      var month = (0, _calendar.toDateWithNoDiscrepancy)(props.defaultMonth);
      if (date) {
        month = date;
      } else {
        if (!month) {
          month = (0, _calendar.toDateWithNoDiscrepancy)(new Date());
        }
      }
      _this2.state = {
        month: month
      };
      return _this2;
    }

    _createClass(DatePicker, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.date !== this.props.date) {
          var month = this.state.month;
          if (!(0, _calendar.isMonthEqual)(nextProps.date, month)) {
            var date = (0, _calendar.toDateWithNoDiscrepancy)(nextProps.date);
            this.setState({
              month: date
            });
          }
        }
      }
      /**
       * 传入日期返回该日期所在月份所有日期对象数组
       * @param {Date} date  
       */

    }, {
      key: 'onChangeMonth',
      value: function onChangeMonth(date) {
        this.setState({
          month: (0, _calendar.toDateWithNoDiscrepancy)(date)
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var month = this.state.month;

        var _props2 = this.props,
            className = _props2.className,
            dateBarClassName = _props2.dateBarClassName,
            dateTitClassName = _props2.dateTitClassName,
            dateBoxClassName = _props2.dateBoxClassName,
            dateClassName = _props2.dateClassName,
            formatWeek = _props2.formatWeek,
            start = _props2.start,
            otherProps = _objectWithoutProperties(_props2, ['className', 'dateBarClassName', 'dateTitClassName', 'dateBoxClassName', 'dateClassName', 'formatWeek', 'start']);

        var date = (0, _calendar.toDateWithNoDiscrepancy)(this.props.date);
        return _react2.default.createElement(
          'div',
          {
            className: 'date-picker-wrap ' + className,
            onClick: function onClick(e) {
              e.stopPropagation();
            } },
          DateBar ? _react2.default.createElement(DateBar, _extends({
            month: month,
            className: dateBarClassName
          }, otherProps, {
            date: date,
            onChange: this.onChangeMonth.bind(this)
          })) : null,
          DateBox ? _react2.default.createElement(
            'div',
            { className: 'date-picker-cal-box' },
            DateTitle ? _react2.default.createElement(DateTitle, { start: start, formatWeek: formatWeek, className: dateTitClassName }) : null,
            _react2.default.createElement(DateBox, _extends({
              start: start,
              formatWeek: formatWeek,
              month: month,
              dateClassName: dateClassName,
              className: dateBoxClassName,
              DateItem: DateItem
            }, otherProps, {
              date: date
            }))
          ) : null,
          DateOther ? _react2.default.createElement(DateOther, _extends({ date: date, start: start, formatWeek: formatWeek, month: month }, otherProps)) : null
        );
      }
    }]);

    return DatePicker;
  }(_react.Component);

  DatePicker.propTypes = {
    onSelect: _propTypes2.default.func,
    formatWeek: _propTypes2.default.array,
    start: _propTypes2.default.number,
    className: _propTypes2.default.string,
    dateBarClassName: _propTypes2.default.string,
    dateBoxClassName: _propTypes2.default.string,
    dateTitClassName: _propTypes2.default.string,
    dateClassName: _propTypes2.default.string
  };
  DatePicker.defaultProps = {
    onSelect: _config.noop,
    formatWeek: _config.weekFormatter,
    start: 0,
    className: '',
    dateBarClassName: '',
    dateBoxClassName: '',
    dateTitClassName: '',
    dateClassName: '',
    max: '',
    min: '',
    defaultMonth: ''
  };
  return DatePicker;
}